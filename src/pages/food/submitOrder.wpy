<template>
  <view class="container">
    <topBar :config='config'></topBar>

    <view class='wrap'>
        
        <view style='display: flex; align-items: center; margin-bottom: 10rpx; padding: 10rpx 0; background: #fff;'>

          <!-- <repeat for='{{sendMethods}}' index='index' item='item'> -->
            <view style='display: flex; align-items: center; margin-right: 30rpx;' wx:if='{{isVirtual}}'>
              <icon type='success' size='20' color="{{ true ? '#ff5f00' : 'gray'}}" @tap='changeMethods({{index}})'></icon>
              <view style='margin-left: 20rpx;'>{{sendMethods[0].title}}</view>
            </view>
            <view style='display: flex; align-items: center; margin-right: 30rpx;' wx:else>
              <icon type='success' size='20' color="{{ true ? '#ff5f00' : 'gray'}}" @tap='changeMethods({{index}})'></icon>
              <view style='margin-left: 20rpx;'>{{sendMethods[1].title}}</view>
            </view>
          <!-- </repeat> -->

        </view>

        <address :address.sync='address' @change.user='changeAddress' wx:if='{{!isVirtual}}'></address>

        <repeat for='{{goodsList}}' item='item'>
          <view class='goods'>
            <image class='goods_img' src='{{item.goods_image}}' />
            <view class='goods_info'>
              <view>
                <view class='goods_name'>{{item.goods_name}}</view>
                <view>{{item.goods_num}}</view>
              </view>
              <view class='s-1'>¥{{item.goods_price}}</view>
            </view>
          </view>
        </repeat>

        <view class='row' wx:if='{{isSingle}}'>
          <view class='number_wrap'>
            <view style='margin-right: 25rpx;'>数量</view>
            <add :config.sync='numberConfig' @change.user='changeNumber' ></add>
          </view>
          <view class='sum_wrap'>
            <text class='sum_title'>总价</text>
            <text class='s-1'>¥{{totalFee}}</text>
          </view>
        </view>

        <view class='row' style='margin-bottom: 117rpx;'>
          <view>绑定手机号</view>
          <view>{{getPhone}}</view>
        </view>

        <view class='bottom_bar'>
          <view>实付金额：<text class='s-1'>¥{{totalFee}}</text></view>
          <view class='buy_btn' @tap='submitOrder'>去付款</view>
        </view>
      </view>

  </view>
</template>
<script>
import wepy from 'wepy';
import topBar from '../../components/topBar';
import add from '../../components/number';
import address from '../../components/address';
import api from '../../utils/api';

export default class submitOrder extends wepy.page {
  config = {
    enablePullDownRefresh: false,
    // disableScroll: true,
  }

  components = {
    topBar,
    add,
    address,
  }

  data = {
    config: {
      isLeft: true,
      name: '提交订单',
      canBack: true,
    },
    numberConfig: {
      number: 1,
      max: 1,
      hasBorder: true,
    },
    sendMethods: [ { title: '到店使用', isVirtual: true, }, { title: '快递邮寄', isVirtual: false, } ],
    address: null, 
    goodsList: [],
    isSingle: true, // true 表示单个商品, false: 表示购物车
    isVirtual: null,
    canAdd: true,
    totalFee: null,
    canSubmit: true,
    canGo: false,
    order_id: null,
  }

  computed = {
    getPhone(){
      let reg = /^\d{3}(\d{4})/g;
      return wx.getStorageSync('userInfo').phone.replace(/^(\d{3})\d{4}(\d{4})$/, "$1****$2");
    },
  }

  onLoad(params) {

    this.numberConfig.number = 1;

    if(params.goodsList){
      this.isSingle = false;
      this.goodsList = JSON.parse(decodeURIComponent(params.goodsList));    
      this.isVirtual = this.goodsList.every(v => v.is_virtual); 
      // console.log(this.isVirtual, this.goodsList);
      return ;
    }

    this.goodsList = [ JSON.parse(decodeURIComponent(params.goods)) ];
    this.isVirtual = this.goodsList[0].is_virtual;
    console.log(this.isVirtual, this.goodsList);

  }

  onShow(){
    if(this.canGo){
      console.log('canGo pay after');
      // return this.goPayed();    
    }

    let global = this.$parent.globalData;
    if(global.address){
      this.address = global.address;
      delete global.address;
    }

    this.checkout();
  }

  methods = {
    changeMethods(index){
      this.sendMethods.forEach((v, i) => this.sendMethods[i].isChecked = i === index ? true : false);
    },
    changeAddress(){
      // console.log('submit', this.address);
      wx.navigateTo({ url: '/pages/my/addressList?canBack=true' });
    },
    changeNumber(){
      let number = this.numberConfig.number;

      console.log('-----change Number----', number, this.numberConfig.number);
      this.checkout();
      
    },
    submitOrder(){
      if(!this.canSubmit){
        return wx.showToast({ title: '订单已提交!', icon: 'none', duration: 3000, });
      }

      this.canSubmit = false;
      this.submit();
      

    }
  }
  
  async submit(){
    wx.showLoading({ title: 'Loading...' });

    let params = {
      cart_id: this.getCartId(),
      address_id: this.isVirtual ? null : this.address.address_id,
      pay_name: 'online',
      pay_message: [],
      order_from: 2,
      // is_virtual: this.isVirtual,
      is_pintuan: null,
      ifcart: this.isSingle ? 0 : 1,
    };

    let res = await api.submitOrder(params);

    this.order_id = res.order_id; 

    let payres = await this.pay(res); 

    console.log('pay', this.order_id, payres);
    wx.hideLoading();

    if(payres.errMsg === 'requestPayment:ok'){
      this.canGo = true;
      this.$apply();
      wx.redirectTo({
        url: '/pages/food/payed?id=' + this.order_id,
      });
    }else if(payres === 'requestPayment:fail cancel'){
      wx.showToast({ title: '支付已取消!', icon: 'none', duration: 2000, });
    }
    
  }

  async pay(res){

    // let params = {
    //   pay_type: 'real_order',// this.isVirtual ? 'vr_order' : 'real_order',
    // },
    // res = await api.payOrder(pay_sn, params);

    return new Promise(function(resolve, reject){

      wx.requestPayment({
        nonceStr: res.nonceStr,
        package: res.package, 
        signType: res.signType,
        paySign: res.paySign, 
        timeStamp: res.timeStamp,
        success(e){ resolve(e) },
        fail(e){ reject(e); console.log(e); },
      });

    }).catch(e => e.errMsg);
    
    
  }

  async checkout(){
  
    let address;
    if(!this.isVirtual && !this.address){
      address = await api.getDefaultAddress({ address_is_default: 1, });

      this.address = address[0];
      this.$apply();
    }
      
    let params = {
      cart_id: this.getCartId(), 
      ifcart: this.isSingle ? 0 : 1,
      city_id: this.isVirtual ? '' : this.address.city_id,
    };
    // console.log('----', params, this.address);

    let res = await api.checkout(params),
        totalObj = res.store_final_order_total;

    this.totalFee = 0;
    for(let key in totalObj){
     this.totalFee += totalObj[key];
    }

    this.totalFee = this.totalFee.toFixed(2);
    this.canAdd = true;
    this.$apply();
  }
  
  getCartId(){
    return this.isSingle ? this.goodsList.map(v => `${v.goods_id}|${this.numberConfig.number}`) : this.goodsList.map(v => `${v.cart_id}|${v.goods_num}`);
  }

  goPayed(){

    wx.redirectTo({
      url: '/pages/food/payed?id=' + this.order_id,
    });

  }

}

</script>
<style lang="less">
page {
  width: 100%;
  height: 100%;
}

.container{
  margin-top: 150rpx;
  padding: 10rpx;
  font: 30rpx 'RTWSYueGoTrial-Regular';
  color: #000;
  background: #f5f5f5;
}

.s-1{
  color: #ff5f00;
}

.goods{
  display: flex;
  padding: 15rpx 37rpx 0 15rpx;
  background: #fff;
  .goods_img{
    width: 226rpx;
    height: 226rpx;
    background: #ccc;
  }
  .goods_info{
    display: flex;
    justify-content: space-between;
    width: 427rpx;
    margin-left: 24rpx;
    padding: 15rpx 0 0;
    .goods_name{
      width: 300rpx;
      white-space: nowrap;
      text-overflow: ellipsis;
      overflow: hidden;
    }
  }
}

.row{
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 50rpx 37rpx 50rpx 15rpx;
  background: #fff;
  .number_wrap, .sum_wrap{
    display: flex;
    align-items: center;
  }
  .sum_title{
    margin-right: 50rpx;
  }
}

.bottom_bar{
  box-sizing: border-box;
  position: fixed;
  left: 0;
  bottom: 0;
  width: 100%;
  height: 117rpx;
  padding: 0 24rpx;
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: #fff;
  .buy_btn{
    width: 159rpx;
    height: 58rpx;
    line-height: 58rpx;
    border: 1rpx solid #cdcdcd;
    border-radius: 10rpx;
    text-align: center;
  }
}
</style>
